---
title: "Laboraufgabe 2.1"
description: "# Laboraufgabe 2.1\n---\n#### Code - `main.c`:\n - Wir haben in der\
  \ Vorlesung das Einlesen von Zahlen und Buchstaben von der\nTastatur und deren formatierte\
  \ Ausgabe auf den Bildschirm kennengelernt. Dazu\nwurden die Funktionen `scanf()`\
  \ und `printf()` verwendet. Setzen Sie diese\nFunktionen ein, um die folgende Aufgabe\
  \ zu lösen:\nDer Benutzer wird gebeten, 4 Gleitpunktzahlen, getrennt durch Leerzeichen,\n\
  einzugeben. Das Programm berechnet die Summe der Zahlen und gibt die\nzugehörige\
  \ mathematische Gleichung mit dem Ergebnis aus. Nutzen Sie dafür die\nvorgegebene\
  \ Struktur der Funktion `printformula`.\n\nBeispiel für einen Programmlauf:\n\n\
  \    \n    $> ./Aufgabe2.exe\n    Bitte geben Sie 4 Gleitpunktzahlen ein, getrennt\
  \ durch (ein) Leerzeichen:\n    2.1e-1 0.21 0.021e1 210e-3\n    0.210000 + 0.210000\
  \ + 0.210000 + 0.210000 = 0.840000\n\n - Testen Sie Ihr Programm, indem Sie die\
  \ Zahl `0.21` in der Eingabezeile auf 4\n verschiedene Arten (z.B. unter Verwendung\
  \ der Exponentialschreibweise)\n angeben.\n\n#### Schriftlich - `Abgabe.txt`:\n\
  \ - Nennen Sie 5 unterschiedliche Datentypen, geben Sie zu jedem den\nWertebereich,\
  \ den Speicherplatzbedarf und die Art der zu speichernden\nInformation an."
hidden:
- "**/*_test.py"
- ".codeclimate.yml"
- "requirements.txt"
- "headercheck.py"
- "Exercise.txt"
- "args.txt"
protected: []
evaluation:
- step: "junit"
  options:
    commands:
    - "pip install -r requirements.txt"
    - "pytest --junitxml=test-results/TEST-suite.xml main_test.py"
    image: "python:3.7"
    project-path: "/code"
    results-path: "test-results"
  title: "Unit Tests"
- step: "comments"
  options: {}
  title: "Comments"
- step: "codeclimate"
  options: {}
  title: "Code Quality"
